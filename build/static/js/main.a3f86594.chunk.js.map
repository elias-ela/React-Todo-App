{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/SearchBox.js","components/AddTodo.js","components/Navbar.js","components/FilterBy.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_ref","onChecked","todoItem","onDeleteButtonClick","id","text","status","react_default","a","createElement","className","type","value","name","defaultChecked","onChange","e","htmlFor","style","textDecorationLine","textDecorationColor","onClick","TodoList","todoItems","map","components_TodoItem","key","SearchBox","onSearchChange","placeholder","maxLength","AddTodo","onAddInputChange","onAddClick","AddInput","Fragment","Navbar","FilterBy","onRadioButtonChange","filterBy","checked","event","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","searchField","target","updateTodoItem","state","prevState","concat","preventDefault","newTodoItem","Date","now","filter","_this$state","filteredTodo","toLowerCase","includes","components_AddTodo","components_SearchBox","length","components_TodoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3f86594.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TodoItem = ({ onChecked, todoItem, onDeleteButtonClick }) => {\r\n  let { id, text, status } = todoItem;\r\n  return (\r\n    <div>\r\n      <ul className=\"list-group text-capitalize\">\r\n        <li className=\"list-group-item\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id={id}\r\n            value={id}\r\n            name={id}\r\n            defaultChecked={status ? \"\" : \"checked\"}\r\n            onChange={e => onChecked(id, e)}\r\n          />{\" \"}\r\n          <label\r\n            htmlFor={id}\r\n            style={\r\n              status\r\n                ? { textDecorationLine: \"\" }\r\n                : {\r\n                    textDecorationLine: \"line-through\",\r\n                    textDecorationColor: \"red\"\r\n                  }\r\n            }\r\n          >\r\n            {text}\r\n          </label>\r\n          <button\r\n            className=\"btn btn-danger btn-sm float-right\"\r\n            type=\"button\"\r\n            onClick={e => onDeleteButtonClick(id, e)}\r\n          >\r\n            X\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodoList = ({ todoItems, onChecked, onDeleteButtonClick }) => {\r\n  return (\r\n    <div>\r\n      {todoItems.map(todoItem => {\r\n        return (\r\n          <TodoItem\r\n            key={todoItem.id}\r\n            todoItem={todoItem}\r\n            onChecked={onChecked}\r\n            onDeleteButtonClick={onDeleteButtonClick}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n  return (\r\n    <div className=\"input-group input-group-lg mb-3\">\r\n      <input\r\n        className=\"form-control text-capitalize\"\r\n        type=\"search\"\r\n        placeholder=\"Search for a todo\"\r\n        onChange={onSearchChange}\r\n        maxLength=\"50\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst AddTodo = ({ onAddInputChange, onAddClick, AddInput }) => {\r\n  return (\r\n    <React.Fragment>\r\n      <form>\r\n        <div className=\"input-group input-group-lg mb-3\">\r\n          <input\r\n            className=\"form-control text-capitalize\"\r\n            type=\"text\"\r\n            value={AddInput}\r\n            placeholder=\"Type a New Todo\"\r\n            onChange={onAddInputChange}\r\n            maxLength=\"50\"\r\n          />\r\n          <div className=\"input-group-append\">\r\n            <button\r\n              className=\"btn btn-secondary\"\r\n              type=\"submit\"\r\n              onClick={onAddClick}\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddTodo;\r\n","import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n      <span className=\"navbar-text\">Your Personal Todo App &#9787;</span>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function FilterBy({ onRadioButtonChange, filterBy }) {\r\n  return (\r\n    <div>\r\n      <div className=\"form-check form-check-inline\">\r\n        <input\r\n          type=\"radio\"\r\n          className=\"form-check-input\"\r\n          id=\"defaultInline1\"\r\n          name=\"all\"\r\n          checked={filterBy === \"all\" ? true : false}\r\n          onChange={event => {\r\n            onRadioButtonChange(event);\r\n          }}\r\n        />\r\n        <label className=\"form-check-label\" htmlFor=\"defaultInline1\">\r\n          All\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"form-check form-check-inline\">\r\n        <input\r\n          type=\"radio\"\r\n          className=\"form-check-input\"\r\n          id=\"defaultInline2\"\r\n          name=\"unchecked\"\r\n          checked={filterBy === \"unchecked\" ? true : false}\r\n          onChange={event => {\r\n            onRadioButtonChange(event);\r\n          }}\r\n        />\r\n        <label className=\"form-check-label\" htmlFor=\"defaultInline2\">\r\n          Unchecked\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"form-check form-check-inline\">\r\n        <input\r\n          type=\"radio\"\r\n          className=\"form-check-input\"\r\n          id=\"defaultInline3\"\r\n          name=\"archived\"\r\n          checked={filterBy === \"archived\" ? true : false}\r\n          onChange={event => {\r\n            onRadioButtonChange(event);\r\n          }}\r\n        />\r\n        <label className=\"form-check-label\" htmlFor=\"defaultInline3\">\r\n          Archived\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport SearchBox from \"./components/SearchBox\";\r\nimport AddTodo from \"./components/AddTodo\";\r\nimport NavBar from \"./components/Navbar\";\r\nimport FilterBy from \"./components/FilterBy\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      todoItems: [],\r\n      searchField: \"\",\r\n      AddInput: \"\",\r\n      filterBy: \"all\"\r\n    };\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  onAddInputChange = event => {\r\n    this.setState({ AddInput: event.target.value });\r\n  };\r\n\r\n  onChecked = id => {\r\n    let updateTodoItem = this.state.todoItems.map(todoItem => {\r\n      if (id === todoItem.id) todoItem.status = !todoItem.status;\r\n      return todoItem;\r\n    });\r\n    this.setState(prevState => ({\r\n      todoItem: prevState.todoItems.concat(updateTodoItem)\r\n    }));\r\n  };\r\n\r\n  onAddClick = event => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.AddInput === \"\") {\r\n      return;\r\n    }\r\n    let newTodoItem = {\r\n      id: Date.now(),\r\n      text: this.state.AddInput,\r\n      status: true\r\n    };\r\n\r\n    this.setState(prevState => ({\r\n      todoItems: prevState.todoItems.concat(newTodoItem),\r\n      AddInput: \"\"\r\n    }));\r\n  };\r\n\r\n  onDeleteButtonClick = id => {\r\n    let updateTodoItem = this.state.todoItems.filter(todoItem => {\r\n      return id !== todoItem.id;\r\n    });\r\n    this.setState({\r\n      todoItems: [].concat(updateTodoItem)\r\n    });\r\n  };\r\n\r\n  onRadioButtonChange = event => {\r\n    let filterBy = \"\";\r\n    switch (event.target.name) {\r\n      case \"unchecked\":\r\n        filterBy = \"unchecked\";\r\n        break;\r\n      case \"archived\":\r\n        filterBy = \"archived\";\r\n        break;\r\n      default:\r\n        filterBy = \"all\";\r\n    }\r\n    this.setState({\r\n      filterBy: filterBy\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { todoItems, searchField, filterBy } = this.state;\r\n    const filteredTodo = todoItems.filter(todoItem => {\r\n      if (filterBy === \"archived\")\r\n        return (\r\n          todoItem.text.toLowerCase().includes(searchField.toLowerCase()) &&\r\n          todoItem.status === false\r\n        );\r\n      else if (filterBy === \"unchecked\")\r\n        return (\r\n          todoItem.text.toLowerCase().includes(searchField.toLowerCase()) &&\r\n          todoItem.status === true\r\n        );\r\n      else\r\n        return todoItem.text.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar />\r\n        <div className=\"container mt-5\">\r\n          <div className=\"jumbotron border border-secondary\">\r\n            <h1 className=\"\">Your Personal Todo App &#9787;</h1>\r\n            <hr className=\"my-4\" />\r\n            <br />\r\n            <AddTodo\r\n              AddInput={this.state.AddInput}\r\n              onAddInputChange={this.onAddInputChange}\r\n              onAddClick={this.onAddClick}\r\n            />\r\n            <hr className=\"my-4\" />\r\n            <SearchBox onSearchChange={this.onSearchChange} />\r\n            <hr className=\"my-4\" />\r\n            <FilterBy\r\n              onRadioButtonChange={this.onRadioButtonChange}\r\n              filterBy={this.state.filterBy}\r\n            />\r\n            <hr className=\"my-4\" />\r\n            <br />\r\n            {this.state.todoItems.length === 0 ? (\r\n              <div>Dude, add some todos enji! &#9785;</div>\r\n            ) : (\r\n              <TodoList\r\n                todoItems={filteredTodo}\r\n                onChecked={this.onChecked}\r\n                onDeleteButtonClick={this.onDeleteButtonClick}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}